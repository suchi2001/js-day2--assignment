<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Assignment Questions for Day 2</h1>
    <h3>Question 1</h3>
    <p>Write a js code which takes input from the user and logs it in the console.</p>
    <h1>ANSWER:</h1>
    <p>The console.log() is a function in JavaScript which is used to print any kind of variables defined before in it or to just print any message that needs to be displayed to the user.
        Syntax:

        console.log(A);
        Parameters: It accepts a parameter which can be an array, an object or any message.
        Return value: It returns the value of the parameter given.
        JavaScript codes to show the working of this function:
        
        1) Passing a number as an argument: If the number is passed to the function console.log() then the function will display it.<script> 
            var a = 2; 
            console.log(a); 
            </script> 
            <br>
        2) Passing a string as an argument: If the string is passed to the function console.log(), then the function will display it.<script> 
            var str = "LETSUPGRADE"; 
            console.log(str); 
            </script>
            <br> 
        3) Passing a char as an argument: If the char is passed to the function console.log(), then the function will display it.<script> 
                var ch = '2'; 
                console.log(ch); 
                </script> 
                <br>
        4) Passing a message as an argument: If the message is passed to the function console.log(), then the function will display the given message.<script> 
            console.log("LETSUPGRADE"); 
            </script>
            <br> 
        5) Passing a function as an argument: If the function is passed to the function console.log(), then the function will display the value of the passed function().<script> 
            function func() { return (5 * 19); } 
            console.log(func()); 
            </script>
            <br> 
        6) Passing a number with message as an argument: If the number is passed to the function console.log(), then the function will display it along with the given message.<script> 
            var a = 2; 
            console.log("The value of a is " + a); 
            </script> 
            <br>
        7) Passing a string with message as an argument: If the string is passed to the function console.log(), then the function will display it along with the given message.<script> 
            var str = "LETSUPGRADE"; 
            console.log("The value of str is " + str); 
            </script>
            <br> 
        8) Passing a char with message as an argument: If the char is passed to the function console.log(), then the function will display it along with the given message.<script> 
                var ch = '2'; 
                console.log("The value of ch is " + ch); 
                </script> 
                </p>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Assignment Questions for Day 2</h1>
    <h3>Question 2</h3>
    <p>Explain with examples the remaining methods of String and Array</p>
    <h1>ANSWER:</h1>
    <h1>JavaScript String Reference:</h1>
    <h2>JavaScript Strings:</h2>
    <p>A JavaScript string stores a series of characters like "John Doe".
       A string can be any text inside double or single quotes:<script>
        var carName1 = "Volvo XC60";  // Double quotes
        var carName2 = 'Volvo XC60';  // Single quotes
        console.log(carName1,carName2);
       
        </script>
        String indexes are zero-based: The first character is in position 0, the second in 1, and so on.
    <br>
    <h2>String Properties and Methods:</h2>Primitive values, like "John Doe", cannot have properties or methods (because they are not objects).

    But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.
    
    <br>
    <h2>String Properties:</h2>
    Property	               Description
   constructor     -	     Returns the string's constructor function
   length	       -      Returns the length of a string
   prototype	   -     Allows you to add properties and methods to an object  
   <br>
   <h2>String Methods:</h2> 
   Method	                  Description
 charAt()	 -   Returns the character at the specified index (position)
charCodeAt()-	Returns the Unicode of the character at the specified index
concat()	-    Joins two or more strings, and returns a new joined strings
endsWith()	-    Checks whether a string ends with specified string/characters
fromCharCode()-	Converts Unicode values to characters
includes()	-    Checks whether a string contains the specified string/characters
indexOf()	-    Returns the position of the first found occurrence of a specified value in a string
lastIndexOf()	-Returns the position of the last found occurrence of a specified value in a string
localeCompare()-	Compares two strings in the current locale
match()	      -  Searches a string for a match against a regular expression, and returns the matches
repeat()	-    Returns a new string with a specified number of copies of an existing string
replace()	-    Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
search()	   - Searches a string for a specified value, or regular expression, and returns the position of the match
slice()	     -   Extracts a part of a string and returns a new string
split()	   -     Splits a string into an array of substrings
startsWith()-	Checks whether a string begins with specified characters
substr()-	    Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
substring()	  -  Extracts the characters from a string, between two specified indices
toLocaleLowerCase()-	Converts a string to lowercase letters, according to the host's locale
toLocaleUpperCase()-	Converts a string to uppercase letters, according to the host's locale
toLowerCase()	-Converts a string to lowercase letters
toString()	 -   Returns the value of a String object
toUpperCase()-	Converts a string to uppercase letters
trim()	    -    Removes whitespace from both ends of a string
valueOf()	-    Returns the primitive value of a String object 
<h1>charAt() Example:</h1>


<script>

  let str = "HELLO WORLD";
  let res = str.charAt(0)
  console.log(res);

</script>
<h1>Definition and Usage:</h1>
    The charAt() method returns the character at the specified index in a string.
    The index of the first character is 0, the second character is 1, and so on.
    Tip: The index of the last character in a string is string.length-1, the second last character is string.length-2, and so on.
    <br>
    
<h1>ARRAY:</h1>
<p>The Array object is used to store multiple values in a single variable:</p>
<script>
let cars = ["Saab", "Volvo", "BMW"];
console.log(cars);
</script>
<h1>Array Properties:</h1>
    Property	                        Description
    constructor	    Returns the function that created the Array object's prototype
    length	        Sets or returns the number of elements in an array
    prototype	    Allows you to add properties and methods to an Array object
    <br>
    <h1>Array Methods:</h1>
    Method	                            Description
    concat()	-       Joins two or more arrays, and returns a copy of the joined arrays
    copyWithin()	-   Copies array elements within the array, to and from specified positions
    entries()	-       Returns a key/value pair Array Iteration Object
    every()-	        Checks if every element in an array pass a test
    fill()-	            Fill the elements in an array with a static value
    filter()-	        Creates a new array with every element in an array that pass a test
    find()-	            Returns the value of the first element in an array that pass a test
    findIndex()-    	Returns the index of the first element in an array that pass a test
    forEach()-      	Calls a function for each array element
    from()-	            Creates an array from an object
    includes()-     	Check if an array contains the specified element
    indexOf()	-       Search the array for an element and returns its position
    isArray()	-       Checks whether an object is an array
    join()	-           Joins all elements of an array into a string
    keys()	-           Returns a Array Iteration Object, containing the keys of the original array
    lastIndexOf()	-   Search the array for an element, starting at the end, and returns its position
    map()	-           Creates a new array with the result of calling a function for each array element
    pop()	-           Removes the last element of an array, and returns that element
    push()-	            Adds new elements to the end of an array, and returns the new length
    reduce()	-       Reduce the values of an array to a single value (going left-to-right)
    reduceRight()	-   Reduce the values of an array to a single value (going right-to-left)
    reverse()	-       Reverses the order of the elements in an array
    shift()	-           Removes the first element of an array, and returns that element
    slice()	-           Selects a part of an array, and returns the new array
    some()	-           Checks if any of the elements in an array pass a test
    sort()	-           Sorts the elements of an array
    splice()	-       Adds/Removes elements from an array
    toString()	-       Converts an array to a string, and returns the result
    unshift()	-       Adds new elements to the beginning of an array, and returns the new length
    valueOf()	-       Returns the primitive value of an array
    <br>
    <h1>concat() Method Example:</h1>

        <script>
        
          var hege = ["Cecilie", "Lone"];
          var stale = ["Emil", "Tobias", "Linus"];
          var children = hege.concat(stale); 
          console.log(children);
        
     
        </script>
       <h1>Definition and Usage:</h1> 
        The concat() method is used to join two or more arrays.
        This method does not change the existing arrays, but returns a new array, containing the values of the joined arrays.</p>
</body>
</html>
